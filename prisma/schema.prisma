// Prisma schema for MongoDB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Blog model
model Blog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  body            String
  slug            String   @unique
  author          String
  metaDescription String?
  published       Boolean  @default(false)
  featuredImage   Json?
  bodyImage       Json[]
  category        String[]
  userId          String?  @db.ObjectId
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("blogs")
}

// Portfolio model
model Portfolio {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String   @unique
  description     String
  content         String?
  featureImage    String?
  category        String?
  projectDuration Json?
  projectBudget   Float?
  clientName      String?
  clientWebsite   String?
  liveUrl         String?
  githubUrl       String?
  technologies    String[] // Simple array for technologies
  images          Json[]   // Simple array for images
  published       Boolean  @default(false)
  featured        Boolean  @default(false)
  pinned          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("portfolios")
}

// Note model
model Note {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  category   String   @default("General")
  tags       String[] @default([])
  isPinned   Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notes")
}

// Media model
model Media {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  alt          String
  url          String
  publicId     String   @unique
  folder       String   @default("dashboard-blogs")
  format       String
  width        Int
  height       Int
  bytes        Int
  resourceType String   @default("image")
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media")
}

enum Role {
  USER
  ADMIN
}